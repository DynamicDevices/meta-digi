From: Arturo Buzarra <arturo.buzarra@digi.com>
Date: Mon, 21 Jan 2019 11:30:57 +0100
Subject: [PATCH] networkmanager: trigger dispatcher on per-device
 connectivity loss

This creates a new dispatcher action DEVICE_CONNECTIVITY_CHANGE, that
gets triggered whenever one interface fails in the upstream connectivity
check, regardless of the system having connectivity through a different
interface.

Signed-off-by: Javier Viguera <javier.viguera@digi.com>
Signed-off-by: Arturo Buzarra <arturo.buzarra@digi.com>
Signed-off-by: Gabriel Valcazar <gabriel.valcazar@digi.com>
---
 .../nm-libnm-core-aux/nm-dispatcher-api.h     |  1 +
 src/core/devices/nm-device.c                  |  4 ++
 src/core/nm-dispatcher.c                      | 42 ++++++++++++++++++-
 src/core/nm-dispatcher.h                      | 10 ++++-
 4 files changed, 55 insertions(+), 2 deletions(-)

diff --git a/libnm-core/nm-libnm-core-aux/nm-dispatcher-api.h b/libnm-core/nm-libnm-core-aux/nm-dispatcher-api.h
index 7776c84f9a..265fc29ee0 100644
--- a/libnm-core/nm-libnm-core-aux/nm-dispatcher-api.h
+++ b/libnm-core/nm-libnm-core-aux/nm-dispatcher-api.h
@@ -33,6 +33,7 @@
 #define NMD_ACTION_DHCP4_CHANGE        "dhcp4-change"
 #define NMD_ACTION_DHCP6_CHANGE        "dhcp6-change"
 #define NMD_ACTION_CONNECTIVITY_CHANGE "connectivity-change"
+#define NMD_ACTION_DEVICE_CONNECTIVITY_CHANGE "device-connectivity-change"
 
 typedef enum {
     DISPATCH_RESULT_UNKNOWN     = 0,
diff --git a/src/core/devices/nm-device.c b/src/core/devices/nm-device.c
index 5eaf8c23e7..d1444eb36f 100644
--- a/src/core/devices/nm-device.c
+++ b/src/core/devices/nm-device.c
@@ -4325,6 +4325,10 @@ concheck_update_state(NMDevice *          self,
           "connectivity state changed from %s to %s",
           nm_connectivity_state_to_string(priv->concheck_x[IS_IPv4].state),
           nm_connectivity_state_to_string(state));
+
+    if (priv->concheck_x[IS_IPv4].state == NM_CONNECTIVITY_FULL)
+        nm_dispatcher_call_device_connectivity(state, self, NULL, NULL, NULL);
+
     priv->concheck_x[IS_IPv4].state = state;
 
     _notify(self, IS_IPv4 ? PROP_IP4_CONNECTIVITY : PROP_IP6_CONNECTIVITY);
diff --git a/src/core/nm-dispatcher.c b/src/core/nm-dispatcher.c
index 0ab409f5ed..3121662920 100644
--- a/src/core/nm-dispatcher.c
+++ b/src/core/nm-dispatcher.c
@@ -466,7 +466,9 @@ static const char *action_table[] = {[NM_DISPATCHER_ACTION_HOSTNAME]     = NMD_A
                                      [NM_DISPATCHER_ACTION_DHCP4_CHANGE] = NMD_ACTION_DHCP4_CHANGE,
                                      [NM_DISPATCHER_ACTION_DHCP6_CHANGE] = NMD_ACTION_DHCP6_CHANGE,
                                      [NM_DISPATCHER_ACTION_CONNECTIVITY_CHANGE] =
-                                         NMD_ACTION_CONNECTIVITY_CHANGE};
+                                         NMD_ACTION_CONNECTIVITY_CHANGE,
+                                     [NM_DISPATCHER_ACTION_DEVICE_CONNECTIVITY_CHANGE] =
+                                         NMD_ACTION_DEVICE_CONNECTIVITY_CHANGE};
 
 static const char *
 action_to_string(NMDispatcherAction action)
@@ -926,6 +928,44 @@ nm_dispatcher_call_connectivity(NMConnectivityState  connectivity_state,
                             out_call_id);
 }
 
+/**
+ * nm_dispatcher_call_device_connectivity():
+ * @connectivity_state: the #NMConnectivityState value
+ * @device: the #NMDevice the action applies to
+ * @callback: a caller-supplied callback to execute when done
+ * @user_data: caller-supplied pointer passed to @callback
+ * @out_call_id: on success, a call identifier which can be passed to
+ * nm_dispatcher_call_cancel()
+ *
+ * This method does not block the caller.
+ *
+ * Returns: %TRUE if the action was dispatched, %FALSE on failure
+ */
+gboolean
+nm_dispatcher_call_device_connectivity(NMConnectivityState connectivity_state,
+				       NMDevice *device,
+				       NMDispatcherFunc callback,
+				       gpointer user_data,
+				       NMDispatcherCallId **out_call_id)
+{
+	NMActRequest *act_request;
+
+	nm_assert(NM_IS_DEVICE(device));
+
+	act_request = nm_device_get_act_request(device);
+	if (!act_request)
+		return FALSE;
+
+	nm_assert(NM_IN_SET(nm_active_connection_get_device(NM_ACTIVE_CONNECTION(act_request)), NULL, device));
+	return _dispatcher_call(NM_DISPATCHER_ACTION_DEVICE_CONNECTIVITY_CHANGE, FALSE, device,
+				nm_act_request_get_settings_connection(act_request),
+				nm_act_request_get_applied_connection(act_request),
+				nm_active_connection_get_activation_type(NM_ACTIVE_CONNECTION(act_request)) == NM_ACTIVATION_TYPE_EXTERNAL,
+				connectivity_state,
+				NULL, NULL, NULL, NULL,
+				callback, user_data, out_call_id);
+}
+
 void
 nm_dispatcher_call_cancel(NMDispatcherCallId *call_id)
 {
diff --git a/src/core/nm-dispatcher.h b/src/core/nm-dispatcher.h
index d588de4e8f..ff966be4df 100644
--- a/src/core/nm-dispatcher.h
+++ b/src/core/nm-dispatcher.h
@@ -21,7 +21,8 @@ typedef enum {
     NM_DISPATCHER_ACTION_VPN_DOWN,
     NM_DISPATCHER_ACTION_DHCP4_CHANGE,
     NM_DISPATCHER_ACTION_DHCP6_CHANGE,
-    NM_DISPATCHER_ACTION_CONNECTIVITY_CHANGE
+    NM_DISPATCHER_ACTION_CONNECTIVITY_CHANGE,
+    NM_DISPATCHER_ACTION_DEVICE_CONNECTIVITY_CHANGE
 } NMDispatcherAction;
 
 typedef struct NMDispatcherCallId NMDispatcherCallId;
@@ -69,6 +70,13 @@ gboolean nm_dispatcher_call_connectivity(NMConnectivityState  state,
                                          gpointer             user_data,
                                          NMDispatcherCallId **out_call_id);
 
+gboolean nm_dispatcher_call_device_connectivity(NMConnectivityState
+                                                connectivity_state,
+                                                NMDevice *device,
+                                                NMDispatcherFunc callback,
+                                                gpointer user_data,
+                                                NMDispatcherCallId **out_call_id);
+
 void nm_dispatcher_call_cancel(NMDispatcherCallId *call_id);
 
 #endif /* __NM_DISPATCHER_H__ */
