#
# U-Boot script for installing Linux images created by Yocto from the SD
# card into the eMMC
#

# Reset temp variables
install_abort=0
BASEFILENAME=0

# Since SOMs with the B0 SOC might have an older U-Boot that doesn't export the
# SOC revision to the environment, use B0 by default
if test -z "${soc_rev}"; then
	setenv soc_rev B0
fi

# In case this script is used to update to a newer release whose imx-boot file
# is not recognized by the SECO fw check, bypass it by default. The script has
# the necessary logic to choose the correct imx-boot file for the target's SOC.
setenv skip-uboot-check "yes"

# Determine U-Boot file to program basing on SOM's RAM size and SOC type (linked to bus width)
bus_width="32bit"
if test -n "${module_ram}" && test -n "${soc_type}"; then
	if test "${soc_type}" = "imx8dx"; then
		bus_width="16bit"
	fi
	setenv INSTALL_UBOOT_FILENAME imx-boot-##MACHINE##-${soc_rev}-${module_ram}_${bus_width}.bin;
else
	# Determine U-Boot file to program basing on SOM's variant
	if test -n "${module_variant}"; then
		if test "${module_variant}" = "0x01"; then
			setenv INSTALL_UBOOT_FILENAME imx-boot-##MACHINE##-${soc_rev}-1GB_32bit.bin;
		elif test "${module_variant}" = "0x02"; then
			setenv INSTALL_UBOOT_FILENAME imx-boot-##MACHINE##-${soc_rev}-2GB_32bit.bin;
		elif test "${module_variant}" = "0x03"; then
			setenv INSTALL_UBOOT_FILENAME imx-boot-##MACHINE##-${soc_rev}-2GB_32bit.bin;
		elif test "${module_variant}" = "0x04"; then
			setenv INSTALL_UBOOT_FILENAME imx-boot-##MACHINE##-${soc_rev}-1GB_16bit.bin;
		elif test "${module_variant}" = "0x05"; then
			setenv INSTALL_UBOOT_FILENAME imx-boot-##MACHINE##-${soc_rev}-1GB_16bit.bin;
		elif test "${module_variant}" = "0x06"; then
			setenv INSTALL_UBOOT_FILENAME imx-boot-##MACHINE##-${soc_rev}-512MB_16bit.bin;
		elif test "${module_variant}" = "0x07"; then
			setenv INSTALL_UBOOT_FILENAME imx-boot-##MACHINE##-${soc_rev}-1GB_32bit.bin;
		elif test "${module_variant}" = "0x08"; then
			setenv INSTALL_UBOOT_FILENAME imx-boot-##MACHINE##-${soc_rev}-1GB_32bit.bin;
		elif test "${module_variant}" = "0x09"; then
			setenv INSTALL_UBOOT_FILENAME imx-boot-##MACHINE##-${soc_rev}-512MB_16bit.bin;
		elif test "${module_variant}" = "0x0A"; then
			setenv INSTALL_UBOOT_FILENAME imx-boot-##MACHINE##-${soc_rev}-1GB_16bit.bin;
		elif test "${module_variant}" = "0x0B"; then
			setenv INSTALL_UBOOT_FILENAME imx-boot-##MACHINE##-${soc_rev}-1GB_16bit.bin;
		fi
	fi
fi

# Use 'test -n ...' because 'test -z ...' does not work well on old versions of
# u-boot when the checked value is empty.
if test -n "${INSTALL_UBOOT_FILENAME}"; then
	true;
else
	echo "";
	echo "[ERROR] Cannot determine U-Boot file for this module!";
	echo "";
	echo "1. Set variable 'INSTALL_UBOOT_FILENAME' depending on your ConnectCore 8X variant:";
	echo "   - For a QuadXPlus CPU with 1GB LPDDR4, run:";
	echo "     => setenv INSTALL_UBOOT_FILENAME imx-boot-##MACHINE##-${soc_rev}-1GB_32bit.bin";
	echo "   - For a QuadXPlus CPU with 2GB LPDDR4, run:";
	echo "     => setenv INSTALL_UBOOT_FILENAME imx-boot-##MACHINE##-${soc_rev}-2GB_32bit.bin";
	echo "   - For a DualX CPU with 1GB LPDDR4, run:";
	echo "     => setenv INSTALL_UBOOT_FILENAME imx-boot-##MACHINE##-${soc_rev}-1GB_16bit.bin";
	echo "   - For a DualX CPU with 512MB LPDDR4, run:";
	echo "     => setenv INSTALL_UBOOT_FILENAME imx-boot-##MACHINE##-${soc_rev}-512MB_16bit.bin";
	echo "";
	echo "2. Run the install script again.";
	echo "";
	echo "Aborted";
	echo "";
	exit;
fi;

setenv INSTALL_MMCDEV 1

if test -z "${image-name}"; then
	setenv image-name ##DEFAULT_IMAGE_NAME##
fi
GRAPHICAL_IMAGES="##GRAPHICAL_IMAGES##"
for g in ${GRAPHICAL_IMAGES}; do
	if test "${image-name}" = "${g}"; then
		BASEFILENAME="${image-name}-##GRAPHICAL_BACKEND##"
	fi
done
if test "${BASEFILENAME}" = "0"; then
	BASEFILENAME="${image-name}"
fi
setenv INSTALL_LINUX_FILENAME ${BASEFILENAME}-##MACHINE##.boot.vfat
setenv INSTALL_RECOVERY_FILENAME ${BASEFILENAME}-##MACHINE##.recovery.vfat
setenv INSTALL_ROOTFS_FILENAME ${BASEFILENAME}-##MACHINE##.ext4

# Check for presence of firmware files on the SD card
for install_f in ${INSTALL_UBOOT_FILENAME} ${INSTALL_LINUX_FILENAME} ${INSTALL_RECOVERY_FILENAME} ${INSTALL_ROOTFS_FILENAME}; do
	if test ! -e mmc ${INSTALL_MMCDEV} ${install_f}; then
		echo "ERROR: Could not find file ${install_f}";
		install_abort=1;
	fi;
done
if test "${install_abort}" = "1"; then
	echo "Aborted.";
	exit;
fi

echo "############################################################"
echo "#           Linux firmware install from micro SD           #"
echo "############################################################"
echo ""
echo " This process will erase your eMMC and will install the following files"
echo " on the partitions of the eMMC."
echo ""
echo "   PARTITION   FILENAME"
echo "   ---------   --------"
echo "   bootloader  ${INSTALL_UBOOT_FILENAME}"
echo "   linux       ${INSTALL_LINUX_FILENAME}"
echo "   recovery    ${INSTALL_RECOVERY_FILENAME}"
echo "   rootfs      ${INSTALL_ROOTFS_FILENAME}"
echo ""
echo " Press CTRL+C now if you wish to abort or wait 10 seconds"
echo " to continue."

sleep 10
if test $? -eq 1; then
	echo "Aborted by user.";
	exit;
fi

# Skip user confirmation for U-Boot update
setenv forced_update 1

# Set bootdelay to zero so that firmware update is run immediately after
# the first reset.
setenv bootdelay 0

# Set target MMC device index to eMMC
setenv mmcdev 0

# Update U-Boot
echo ""
echo ""
echo ">> Installing U-Boot boot loader image ${INSTALL_UBOOT_FILENAME} (target will reset)"
echo ""
echo ""
update uboot mmc ${INSTALL_MMCDEV} ${INSTALL_UBOOT_FILENAME}
if test $? -eq 1; then
	# Use old-style update with source file system argument
	update uboot mmc ${INSTALL_MMCDEV} fat ${INSTALL_UBOOT_FILENAME}
	if test $? -eq 1; then
		echo "[ERROR] Failed to update U-Boot boot loader!";
		echo "";
		echo "Aborted.";
		exit;
	fi
fi

# Set 'bootcmd' to the second part of the script that will
#  - Reset environment to defaults
#  - Save the environment
#  - Force on-the-fly updates to avoid possible verification errors
#  - Partition the eMMC user data area for Linux
#  - Update the 'linux' partition
#  - Update the 'recovery' partition
#  - Update the 'rootfs' partition
#  - Configure recovery to wipe 'update' partition
#  - Disable on-the-fly updates
#  - Run 'recovery' and let the system boot after
setenv bootcmd "
	env default -a;
	saveenv;
	setenv otf-update yes;
	echo \"\";
	echo \"\";
	echo \">> Creating Linux partition table on the eMMC\";
	echo \"\";
	echo \"\";
	run partition_mmc_linux;
	if test \$? -eq 1; then
		echo \"[ERROR] Failed to create Linux partition table!\";
		echo \"\";
		echo \"Aborted.\";
		exit;
	fi;
	echo \"\";
	echo \"\";
	echo \">> Installing linux image file ${INSTALL_LINUX_FILENAME}\";
	echo \"\";
	echo \"\";
	update linux mmc ${INSTALL_MMCDEV} ${INSTALL_LINUX_FILENAME};
	if test \$? -eq 1; then
		echo \"[ERROR] Failed to update linux partition!\";
		echo \"\";
		echo \"Aborted.\";
		exit;
	fi;
	echo \"\";
	echo \"\";
	echo \">> Installing recovery file ${INSTALL_RECOVERY_FILENAME}\";
	echo \"\";
	echo \"\";
	update recovery mmc ${INSTALL_MMCDEV} ${INSTALL_RECOVERY_FILENAME};
	if test \$? -eq 1; then
		echo \"[ERROR] Failed to update recovery partition!\";
		echo \"\";
		echo \"Aborted.\";
		exit;
	fi;
	echo \"\";
	echo \"\";
	echo \">> Installing root file system file ${INSTALL_ROOTFS_FILENAME}\";
	echo \"\";
	echo \"\";
	update rootfs mmc ${INSTALL_MMCDEV} ${INSTALL_ROOTFS_FILENAME};
	if test \$? -eq 1; then
		echo \"[ERROR] Failed to update rootfs partition!\";
		echo \"\";
		echo \"Aborted.\";
		exit;
	fi;
	echo \"\";
	setenv boot_recovery yes;
	setenv recovery_command wipe_update;
	setenv otf-update;
	saveenv;
	echo \"\";
	echo \"\";
	echo \">> Firmware installation complete. Rebooting into recovery mode for final deployment.\";
	echo \"\";
	echo \"\";
	sleep 1;
	reset;
"

saveenv
reset
