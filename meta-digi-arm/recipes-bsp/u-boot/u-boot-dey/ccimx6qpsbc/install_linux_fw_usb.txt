#
# U-Boot script for installing Linux images created by Yocto from a USB stick
# into the eMMC
#

# Reset temp variables
install_abort=0
BASEFILENAME=0

# Determine U-Boot file to program basing on module variant
if test -n "${module_variant}"; then
	if test "${module_variant}" = "0x01" || test "${module_variant}" = "0x02"; then
		setenv INSTALL_UBOOT_FILENAME u-boot-##MACHINE##2GB.imx;
	elif test "${module_variant}" = "0x03"; then
		setenv INSTALL_UBOOT_FILENAME u-boot-##MACHINE##1GB.imx;
	fi
fi
# Use 'test -n ...' because 'test -z ...' does not work well on old versions of
# u-boot when the checked value is empty.
if test -n "${INSTALL_UBOOT_FILENAME}"; then
	true;
else
	echo "";
	echo "[ERROR] Cannot determine U-Boot file for this module!";
	echo "";
	echo "1. Set variable 'INSTALL_UBOOT_FILENAME' depending on your ConnectCore 6 QuadPlus variant:";
	echo "   - For a QuadPlus CPU with 2GB DDR3, run:";
	echo "     => setenv INSTALL_UBOOT_FILENAME u-boot-##MACHINE##2GB.imx";
	echo "   - For a DualPlus CPU with 1GB DDR3, run:";
	echo "     => setenv INSTALL_UBOOT_FILENAME u-boot-##MACHINE##1GB.imx";
	echo "";
	echo "";
	echo "2. Run the install script again.";
	echo "";
	echo "Aborted";
	echo "";
	exit;
fi;

setenv INSTALL_USBDEV 0

if test -z "${image-name}"; then
	setenv image-name ##DEFAULT_IMAGE_NAME##
fi
GRAPHICAL_IMAGES="##GRAPHICAL_IMAGES##"
for g in ${GRAPHICAL_IMAGES}; do
	if test "${image-name}" = "${g}"; then
		BASEFILENAME="${image-name}-##GRAPHICAL_BACKEND##"
	fi
done
if test "${BASEFILENAME}" = "0"; then
	BASEFILENAME="${image-name}"
fi
setenv INSTALL_LINUX_FILENAME ${BASEFILENAME}-##MACHINE##.boot.vfat
setenv INSTALL_RECOVERY_FILENAME ${BASEFILENAME}-##MACHINE##.recovery.vfat
setenv INSTALL_ROOTFS_FILENAME ${BASEFILENAME}-##MACHINE##.ext4

# Check for presence of firmware files on the USB
for install_f in ${INSTALL_UBOOT_FILENAME} ${INSTALL_LINUX_FILENAME} ${INSTALL_RECOVERY_FILENAME} ${INSTALL_ROOTFS_FILENAME}; do
	if test ! -e usb ${INSTALL_USBDEV} ${install_f}; then
		echo "ERROR: Could not find file ${install_f}";
		install_abort=1;
	fi;
done
if test "${install_abort}" = "1"; then
	echo "To install a different image, set variable 'image-name', e.g.:"
	echo "  => setenv image-name core-image-base"
	echo "Aborted.";
	exit;
fi

echo "############################################################"
echo "#           Linux firmware install from USB                #"
echo "############################################################"
echo ""
echo " This process will erase your eMMC and will install the following files"
echo " on the partitions of the eMMC."
echo ""
echo "   PARTITION   FILENAME"
echo "   ---------   --------"
echo "   bootloader  ${INSTALL_UBOOT_FILENAME}"
if test "${dualboot}" = "yes"; then
	echo "   linux_a     ${INSTALL_LINUX_FILENAME}"
	if test "${install_dualboot}" = "yes"; then
		echo "   linux_b     ${INSTALL_LINUX_FILENAME}"
	fi
	echo "   rootfs_a    ${INSTALL_ROOTFS_FILENAME}"
	if test "${install_dualboot}" = "yes"; then
		echo "   rootfs_b    ${INSTALL_ROOTFS_FILENAME}"
	fi
else
	echo "   linux       ${INSTALL_LINUX_FILENAME}"
	echo "   recovery    ${INSTALL_RECOVERY_FILENAME}"
	echo "   rootfs      ${INSTALL_ROOTFS_FILENAME}"
fi
echo ""
echo " Press CTRL+C now if you wish to abort or wait 10 seconds"
echo " to continue."

sleep 10
if test $? -eq 1; then
	echo "Aborted by user.";
	exit;
fi

# Skip user confirmation for U-Boot update
setenv forced_update 1

# Set bootdelay to zero so that firmware update is run immediately after
# the first reset.
setenv bootdelay 0

# Set target MMC device index to eMMC
setenv mmcdev 0

# Update U-Boot
echo ""
echo ""
echo ">> Installing U-Boot boot loader image ${INSTALL_UBOOT_FILENAME} (target will reset)"
echo ""
echo ""
update uboot usb ${INSTALL_USBDEV} fat ${INSTALL_UBOOT_FILENAME}
if test $? -eq 1; then
	echo "[ERROR] Failed to update U-Boot boot loader!";
	echo "";
	echo "Aborted.";
	exit;
fi

# Set 'bootcmd' to the second part of the script that will
#  - Reset environment to defaults
#  - Restore 'dualboot' if previously set
#  - Save the environment
#  - Partition the eMMC user data area for Linux
#  - If Dual Boot
#     - Update the system partitions: linux_a, linux_b, rootfs_a, rootfs_b
#  - If Normal Boot:
#     - Update the system partitions: linux, recovery, rootfs
#     - Erase the 'update' partition
#     - Configure recovery to wipe 'update' partition
#     - Run 'recovery' and let the system boot after
# NOTE: insert some 'usb reset' commands to avoid EHCI timeouts
setenv bootcmd "
	env default -a;
	setenv dualboot ${dualboot};
	setenv install_dualboot ${install_dualboot};
	saveenv;
	echo \"\";
	echo \"\";
	echo \">> Creating Linux partition table on the eMMC\";
	echo \"\";
	echo \"\";
	run partition_mmc_linux;
	if test \$? -eq 1; then
		echo \"[ERROR] Failed to create Linux partition table!\";
		echo \"\";
		echo \"Aborted.\";
		exit;
	fi;
	usb start;
	if test \"\$\{dualboot\}\" = yes; then
		echo \"\";
		echo \"\";
		echo \">> Installing file ${INSTALL_LINUX_FILENAME} on linux_a\";
		echo \"\";
		echo \"\";
		update linux_a usb ${INSTALL_USBDEV} ${INSTALL_LINUX_FILENAME};
		if test \$? -eq 1; then
			echo \"[ERROR] Failed to update linux_a!\";
			echo \"\";
			echo \"Aborted.\";
			exit;
		fi;
		if test \"\$\{install_dualboot\}\" = yes; then
			echo \"\";
			echo \"\";
			echo \">> Installing file ${INSTALL_LINUX_FILENAME} on linux_b\";
			echo \"\";
			echo \"\";
			update linux_b usb ${INSTALL_USBDEV} ${INSTALL_LINUX_FILENAME};
			if test \$? -eq 1; then
				echo \"[ERROR] Failed to update linux_b!\";
				echo \"\";
				echo \"Aborted.\";
				exit;
			fi;
		fi;
		usb reset;
		echo \"\";
		echo \"\";
		echo \">> Installing file ${INSTALL_ROOTFS_FILENAME} on rootfs_a\";
		echo \"\";
		echo \"\";
		update rootfs_a usb ${INSTALL_USBDEV} ${INSTALL_ROOTFS_FILENAME};
		if test \$? -eq 1; then
			echo \"[ERROR] Failed to update rootfs_a partition!\";
			echo \"\";
			echo \"Aborted.\";
			exit;
		fi;
		if test \"\$\{install_dualboot\}\" = yes; then
			echo \"\";
			echo \"\";
			echo \">> Installing file ${INSTALL_ROOTFS_FILENAME} on rootfs_b\";
			echo \"\";
			echo \"\";
			update rootfs_b usb ${INSTALL_USBDEV} ${INSTALL_ROOTFS_FILENAME};
			if test \$? -eq 1; then
				echo \"[ERROR] Failed to update rootfs_b partition!\";
				echo \"\";
				echo \"Aborted.\";
				exit;
			fi;
		fi;
	else
		echo \"\";
		echo \"\";
		echo \">> Installing file ${INSTALL_LINUX_FILENAME} on linux\";
		echo \"\";
		echo \"\";
		update linux usb ${INSTALL_USBDEV} ${INSTALL_LINUX_FILENAME};
		if test \$? -eq 1; then
			echo \"[ERROR] Failed to update linux!\";
			echo \"\";
			echo \"Aborted.\";
			exit;
		fi;
		echo \"\";
		echo \"\";
		echo \">> Installing file ${INSTALL_RECOVERY_FILENAME} on recovery\";
		echo \"\";
		echo \"\";
		update recovery usb ${INSTALL_USBDEV} ${INSTALL_RECOVERY_FILENAME};
		if test \$? -eq 1; then
			echo \"[ERROR] Failed to update recovery partition!\";
			echo \"\";
			echo \"Aborted.\";
			exit;
		fi;
		echo \"\";
		echo \"\";
		echo \">> Installing file ${INSTALL_ROOTFS_FILENAME} on rootfs\";
		echo \"\";
		echo \"\";
		update rootfs usb ${INSTALL_USBDEV} ${INSTALL_ROOTFS_FILENAME};
		if test \$? -eq 1; then
			echo \"[ERROR] Failed to update rootfs partition!\";
			echo \"\";
			echo \"Aborted.\";
			exit;
		fi;
		echo \"\";
		setenv boot_recovery yes;
		setenv recovery_command wipe_update;
	fi;
	saveenv;
	echo \"\";
	echo \"\";
	echo \">> Firmware installation complete.\";
	if test \"\$\{dualboot\}\" != yes; then
		echo \"Rebooting into recovery mode for final deployment.\";
	fi;
	echo \"\";
	echo \"\";
	sleep 1;
	reset;
"

saveenv
reset
